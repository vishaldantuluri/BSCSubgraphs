// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenTransfer", id.toString(), this);
  }

  static load(id: string): TokenTransfer | null {
    return store.get("TokenTransfer", id) as TokenTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get transferredAt(): BigInt {
    let value = this.get("transferredAt");
    return value.toBigInt();
  }

  set transferredAt(value: BigInt) {
    this.set("transferredAt", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenInfo(): string {
    let value = this.get("tokenInfo");
    return value.toString();
  }

  set tokenInfo(value: string) {
    this.set("tokenInfo", Value.fromString(value));
  }
}

export class TokenInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenInfo", id.toString(), this);
  }

  static load(id: string): TokenInfo | null {
    return store.get("TokenInfo", id) as TokenInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketplace(): string {
    let value = this.get("marketplace");
    return value.toString();
  }

  set marketplace(value: string) {
    this.set("marketplace", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creatorAddress(): string {
    let value = this.get("creatorAddress");
    return value.toString();
  }

  set creatorAddress(value: string) {
    this.set("creatorAddress", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get mintTransactionHash(): string {
    let value = this.get("mintTransactionHash");
    return value.toString();
  }

  set mintTransactionHash(value: string) {
    this.set("mintTransactionHash", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }

  get lastTransfer(): BigInt {
    let value = this.get("lastTransfer");
    return value.toBigInt();
  }

  set lastTransfer(value: BigInt) {
    this.set("lastTransfer", Value.fromBigInt(value));
  }

  get numberOfTransfers(): i32 {
    let value = this.get("numberOfTransfers");
    return value.toI32();
  }

  set numberOfTransfers(value: i32) {
    this.set("numberOfTransfers", Value.fromI32(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get creatorInfo(): string {
    let value = this.get("creatorInfo");
    return value.toString();
  }

  set creatorInfo(value: string) {
    this.set("creatorInfo", Value.fromString(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }
}

export class CreatorInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreatorInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreatorInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreatorInfo", id.toString(), this);
  }

  static load(id: string): CreatorInfo | null {
    return store.get("CreatorInfo", id) as CreatorInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get numberOfCreations(): i32 {
    let value = this.get("numberOfCreations");
    return value.toI32();
  }

  set numberOfCreations(value: i32) {
    this.set("numberOfCreations", Value.fromI32(value));
  }

  get creations(): Array<string> {
    let value = this.get("creations");
    return value.toStringArray();
  }

  set creations(value: Array<string>) {
    this.set("creations", Value.fromStringArray(value));
  }
}
