// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CreatorChanged extends ethereum.Event {
  get params(): CreatorChanged__Params {
    return new CreatorChanged__Params(this);
  }
}

export class CreatorChanged__Params {
  _event: CreatorChanged;

  constructor(event: CreatorChanged) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DefultRoyaltyChanged extends ethereum.Event {
  get params(): DefultRoyaltyChanged__Params {
    return new DefultRoyaltyChanged__Params(this);
  }
}

export class DefultRoyaltyChanged__Params {
  _event: DefultRoyaltyChanged;

  constructor(event: DefultRoyaltyChanged) {
    this._event = event;
  }

  get _royalty(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoyaltiesReceived extends ethereum.Event {
  get params(): RoyaltiesReceived__Params {
    return new RoyaltiesReceived__Params(this);
  }
}

export class RoyaltiesReceived__Params {
  _event: RoyaltiesReceived;

  constructor(event: RoyaltiesReceived) {
    this._event = event;
  }

  get _royaltyRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenPaid(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _metadata(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get _uri(): string {
    return this._event.parameters[0].value.toString();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MintMulTRSRNFT__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MintMulTRSRNFT extends ethereum.SmartContract {
  static bind(address: Address): MintMulTRSRNFT {
    return new MintMulTRSRNFT("MintMulTRSRNFT", address);
  }

  _defultRoyalty(): BigInt {
    let result = super.call("_defultRoyalty", "_defultRoyalty():(uint256)", []);

    return result[0].toBigInt();
  }

  try__defultRoyalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_defultRoyalty",
      "_defultRoyalty():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onRoyaltiesReceived(
    _royaltyRecipient: Address,
    _buyer: Address,
    _tokenId: BigInt,
    _tokenPaid: Address,
    _amount: BigInt,
    _metadata: Bytes
  ): Bytes {
    let result = super.call(
      "onRoyaltiesReceived",
      "onRoyaltiesReceived(address,address,uint256,address,uint256,bytes32):(bytes4)",
      [
        ethereum.Value.fromAddress(_royaltyRecipient),
        ethereum.Value.fromAddress(_buyer),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_tokenPaid),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromFixedBytes(_metadata)
      ]
    );

    return result[0].toBytes();
  }

  try_onRoyaltiesReceived(
    _royaltyRecipient: Address,
    _buyer: Address,
    _tokenId: BigInt,
    _tokenPaid: Address,
    _amount: BigInt,
    _metadata: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onRoyaltiesReceived",
      "onRoyaltiesReceived(address,address,uint256,address,uint256,bytes32):(bytes4)",
      [
        ethereum.Value.fromAddress(_royaltyRecipient),
        ethereum.Value.fromAddress(_buyer),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_tokenPaid),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromFixedBytes(_metadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(_id: BigInt): MintMulTRSRNFT__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return new MintMulTRSRNFT__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    _id: BigInt
  ): ethereum.CallResult<MintMulTRSRNFT__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MintMulTRSRNFT__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenSupply(param0: BigInt): BigInt {
    let result = super.call("tokenSupply", "tokenSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tokenSupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenSupply",
      "tokenSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(_id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(_id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toString();
  }

  try_uri(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _proxyRegistryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class ModifyRoyaltyCall extends ethereum.Call {
  get inputs(): ModifyRoyaltyCall__Inputs {
    return new ModifyRoyaltyCall__Inputs(this);
  }

  get outputs(): ModifyRoyaltyCall__Outputs {
    return new ModifyRoyaltyCall__Outputs(this);
  }
}

export class ModifyRoyaltyCall__Inputs {
  _call: ModifyRoyaltyCall;

  constructor(call: ModifyRoyaltyCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ModifyRoyaltyCall__Outputs {
  _call: ModifyRoyaltyCall;

  constructor(call: ModifyRoyaltyCall) {
    this._call = call;
  }
}

export class OnRoyaltiesReceivedCall extends ethereum.Call {
  get inputs(): OnRoyaltiesReceivedCall__Inputs {
    return new OnRoyaltiesReceivedCall__Inputs(this);
  }

  get outputs(): OnRoyaltiesReceivedCall__Outputs {
    return new OnRoyaltiesReceivedCall__Outputs(this);
  }
}

export class OnRoyaltiesReceivedCall__Inputs {
  _call: OnRoyaltiesReceivedCall;

  constructor(call: OnRoyaltiesReceivedCall) {
    this._call = call;
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _buyer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokenPaid(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _metadata(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class OnRoyaltiesReceivedCall__Outputs {
  _call: OnRoyaltiesReceivedCall;

  constructor(call: OnRoyaltiesReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetCreatorCall extends ethereum.Call {
  get inputs(): SetCreatorCall__Inputs {
    return new SetCreatorCall__Inputs(this);
  }

  get outputs(): SetCreatorCall__Outputs {
    return new SetCreatorCall__Outputs(this);
  }
}

export class SetCreatorCall__Inputs {
  _call: SetCreatorCall;

  constructor(call: SetCreatorCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCreatorCall__Outputs {
  _call: SetCreatorCall;

  constructor(call: SetCreatorCall) {
    this._call = call;
  }
}

export class SetDefultRoyaltyCall extends ethereum.Call {
  get inputs(): SetDefultRoyaltyCall__Inputs {
    return new SetDefultRoyaltyCall__Inputs(this);
  }

  get outputs(): SetDefultRoyaltyCall__Outputs {
    return new SetDefultRoyaltyCall__Outputs(this);
  }
}

export class SetDefultRoyaltyCall__Inputs {
  _call: SetDefultRoyaltyCall;

  constructor(call: SetDefultRoyaltyCall) {
    this._call = call;
  }

  get _royalty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDefultRoyaltyCall__Outputs {
  _call: SetDefultRoyaltyCall;

  constructor(call: SetDefultRoyaltyCall) {
    this._call = call;
  }
}

export class SetURIPrefixCall extends ethereum.Call {
  get inputs(): SetURIPrefixCall__Inputs {
    return new SetURIPrefixCall__Inputs(this);
  }

  get outputs(): SetURIPrefixCall__Outputs {
    return new SetURIPrefixCall__Outputs(this);
  }
}

export class SetURIPrefixCall__Inputs {
  _call: SetURIPrefixCall;

  constructor(call: SetURIPrefixCall) {
    this._call = call;
  }

  get _newBaseMetadataURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetURIPrefixCall__Outputs {
  _call: SetURIPrefixCall;

  constructor(call: SetURIPrefixCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateProxyRegistryAddressCall extends ethereum.Call {
  get inputs(): UpdateProxyRegistryAddressCall__Inputs {
    return new UpdateProxyRegistryAddressCall__Inputs(this);
  }

  get outputs(): UpdateProxyRegistryAddressCall__Outputs {
    return new UpdateProxyRegistryAddressCall__Outputs(this);
  }
}

export class UpdateProxyRegistryAddressCall__Inputs {
  _call: UpdateProxyRegistryAddressCall;

  constructor(call: UpdateProxyRegistryAddressCall) {
    this._call = call;
  }

  get _proxyRegistryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateProxyRegistryAddressCall__Outputs {
  _call: UpdateProxyRegistryAddressCall;

  constructor(call: UpdateProxyRegistryAddressCall) {
    this._call = call;
  }
}

export class UpdateUriCall extends ethereum.Call {
  get inputs(): UpdateUriCall__Inputs {
    return new UpdateUriCall__Inputs(this);
  }

  get outputs(): UpdateUriCall__Outputs {
    return new UpdateUriCall__Outputs(this);
  }
}

export class UpdateUriCall__Inputs {
  _call: UpdateUriCall;

  constructor(call: UpdateUriCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateUriCall__Outputs {
  _call: UpdateUriCall;

  constructor(call: UpdateUriCall) {
    this._call = call;
  }
}
